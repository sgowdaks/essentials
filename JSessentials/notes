context => this (global, local)
closure => function that does not die after execution, it still holds value and so that we can use it later

function help(){
    var k = "Shivani"
    return function helpe(){
        console.log("Hello " +k)
    }
    
}

var value = help()
value()


fettch example:
fetch('https://jsonplaceholder.typicode.com/comments/1')
    .then((response) => response.json())
    .then((data) => console.log(data))

fetch('https://jsonplaceholder.typicode.com/comments', {
        method: 'POST',
        body: JSON.stringify({
            name: 'Comment 105',
            email: 'dylansemail310@gmail.com',
            body: 'Dopes comment in the game',
            postId: 1
        })
    })
    .then((response) => response.json())
    .then((data) => console.log(data))
    
    -----------------------------------------------**************************-----------------------------------------
    export class Animal {
    constructor(type, legs) {
        this.type = type;
        this.legs = legs;
    }
    
    makeNoise(sound = 'Loud Noise') {
        console.log(sound);
    }
    
    get metaData() {
        return `Type: ${this.type}, Legs: ${this.legs}`;
    }
    
    static return10() {
        return 10;
    }
}

import { Animal } from './animal.js';

let cat = new Animal('Cat', 4);    //instantiation
console.log(cat.metaData)             // Type: Cat, Legs: 4 (here get is treated has property instaed of )
console.log(cat.makeNoise())
console.log(Animal.return10())      //as animal is described as static it still runs withou instantiation
